import { supabase } from '@/integrations/supabase/client';
import { AuthUser, UserRole, AdminPermissions, LogEntry } from './types';

// Function to sign up a new admin user
const signUpAdmin = async (email: string, password?: string): Promise<AuthUser | null> => {
  try {
    const { data, error } = await supabase.auth.signUp({
      email: email,
      password: password || 'default123', // Provide a default password
      options: {
        data: {
          role: 'admin',
        }
      }
    });
    
    if (error) {
      console.error('Signup failed:', error);
      return null;
    }
    
    // Create a user object
    const newUser: AuthUser = {
      id: data.user?.id || '',
      role: 'admin',
      email: data.user?.email,
      permissions: {
        canCreateElections: true,
        canEditElections: true,
        canDeleteElections: false,
        canManageVoters: true,
        canManageAdmins: false,
        canViewLogs: true,
        canChangeSettings: false,
      }
    };
    
    return newUser;
  } catch (error) {
    console.error('Error during signup:', error);
    return null;
  }
};

// Function to sign in an admin user
const signInAdmin = async (email: string, password?: string): Promise<AuthUser | null> => {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password || 'default123',
    });
    
    if (error) {
      console.error('Signin failed:', error);
      return null;
    }
    
    // Get admin info from database
    const { data: adminData } = await supabase
      .from('admins')
      .select('*')
      .eq('email', data.user?.email)
      .single();
    
    if (!adminData) {
      console.error('User not found in admin table');
      return null;
    }
    
    // Create the admin user object
    return {
      id: data.user?.id || '',
      role: adminData.role || 'admin',
      email: data.user?.email,
      name: adminData.name || 'Admin User',
      permissions: {
        canCreateElections: true,
        canEditElections: true,
        canDeleteElections: adminData.role === 'super_admin',
        canManageVoters: true,
        canManageAdmins: adminData.role === 'super_admin',
        canViewLogs: true,
        canChangeSettings: adminData.role === 'super_admin',
      }
    };
  } catch (error) {
    console.error('Error during signin:', error);
    return null;
  }
};

// Function to sign out an admin user
const signOutAdmin = async (): Promise<boolean> => {
  try {
    const { error } = await supabase.auth.signOut();
    if (error) {
      console.error('Signout failed:', error);
      return false;
    }
    return true;
  } catch (error) {
    console.error('Error during signout:', error);
    return false;
  }
};

// Simplified auth token validation against Supabase
const validateAdminToken = async (token: string): Promise<AuthUser | null> => {
  try {
    // Validate the token with Supabase
    const { data: { user }, error } = await supabase.auth.getUser(token);
    
    if (error || !user) {
      console.error('Token validation failed:', error);
      return null;
    }
    
    // Get admin info from database
    const { data: adminData } = await supabase
      .from('admins')
      .select('*')
      .eq('email', user.email)
      .single();
    
    if (!adminData) {
      console.error('User not found in admin table');
      return null;
    }
    
    // Log the login
    const logData: LogEntry = {
      id: '', // Will be generated by the database
      admin_id: user.id,
      admin_name: adminData.name || 'Unknown Admin',
      action: 'LOGIN',
      details: `Admin login: ${adminData.email}`,
      timestamp: new Date().toISOString()
    };
    
    await supabase.from('logs').insert(logData);
    
    // Create the admin user object
    return {
      id: user.id,
      role: adminData.role || 'admin',
      email: user.email,
      name: adminData.name || 'Admin User',
      permissions: {
        canCreateElections: true,
        canEditElections: true,
        canDeleteElections: adminData.role === 'super_admin',
        canManageVoters: true,
        canManageAdmins: adminData.role === 'super_admin',
        canViewLogs: true,
        canChangeSettings: adminData.role === 'super_admin',
      }
    };
  } catch (error) {
    console.error('Error validating admin token:', error);
    return null;
  }
};

// Function to sign in a voter
const signInVoter = async (code: string, electionId: string): Promise<AuthUser | null> => {
  try {
    // Validate the voter code against the database
    const { data: voterData, error } = await supabase
      .from('voters')
      .select('*')
      .eq('one_time_code', code)
      .eq('election_id', electionId)
      .single();
    
    if (error || !voterData) {
      console.error('Voter authentication failed:', error);
      return null;
    }
    
    if (voterData.has_voted) {
      console.warn('Voter has already voted.');
      return null;
    }
    
    // Create the voter user object
    return {
      id: voterData.id,
      role: 'voter',
      electionId: voterData.election_id,
    };
  } catch (error) {
    console.error('Error during voter signin:', error);
    return null;
  }
};

export const authService = {
  signUpAdmin,
  signInAdmin,
  signOutAdmin,
  validateAdminToken,
  signInVoter
};
